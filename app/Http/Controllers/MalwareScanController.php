<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use RecursiveIteratorIterator;
use RecursiveDirectoryIterator;

class MalwareScanController extends Controller
{
    public function scan()
    {
        $dangerousFunctions = ['eval', 'exec', 'system', 'shell_exec', 'passthru', 'base64_decode', 'assert', 'preg_replace', 'create_function'];
        $suspiciousPatterns = ['<\?php.*base64_', 'gzinflate\(', 'str_rot13', 'eval\(', 'system\(', 'exec\(', 'shell_exec\(', 'assert\(', 'passthru\('];

        $output = "<h3>Scanning PHP files in ".base_path()."</h3>";

        $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(base_path()));

        foreach ($rii as $file) {
            if ($file->isDir()) continue;
            if ($file->getExtension() !== 'php') continue;

            $contents = @file_get_contents($file->getPathname());
            if ($contents === false) continue;

            foreach ($dangerousFunctions as $func) {
                if (stripos($contents, $func) !== false) {
                    $output .= "<b style='color:red;'>[DANGER]</b> " . $file->getPathname() . " contains '$func'<br>";
                    break;
                }
            }

            foreach ($suspiciousPatterns as $pattern) {
                if (preg_match("/$pattern/i", $contents)) {
                    $output .= "<b style='color:orange;'>[SUSPICIOUS]</b> " . $file->getPathname() . " matched pattern '$pattern'<br>";
                    break;
                }
            }
        }

        $output .= "<hr>Scan complete. Jangan lupa hapus fitur ini kalau udah nggak dipakai!";
        return response($output);
    }
}
